package main

import (
	"bytes"
	"flag"
	"fmt"
	"go/format"
	"io/ioutil"
	"log"
	"os"
	"strconv"
	"strings"

	"github.com/npillmayer/uax/internal/testdata"
	"github.com/npillmayer/uax/internal/ucdparse"
)

func main() {
	flag.Parse()

	pairs := readBrackets()

	var w bytes.Buffer
	fmt.Fprintf(&w, "// Code generated by github.com/npillmayer/uax/bidi/internal/gen DO NOT EDIT\n\n")
	fmt.Fprintf(&w, "package %v\n\n", os.Getenv("GOPACKAGE"))
	fmt.Fprintf(&w, "type bracketPair struct { open, close rune }\n\n")
	fmt.Fprintf(&w, "var bracketPairs = []bracketPair{\n")
	for _, pair := range pairs {
		fmt.Fprintf(&w, "\t{open: %q, close: %q},\n", pair.open, pair.close)
	}
	fmt.Fprintf(&w, "}\n")

	formatted, err := format.Source(w.Bytes())
	checkFatal(err)

	err = ioutil.WriteFile("tables.go", formatted, 0644)
	checkFatal(err)
}

type bracketPair struct {
	open  rune
	close rune
}

func readBrackets() []bracketPair {
	file, err := testdata.UCDReader("BidiBrackets.txt")
	checkFatal(err)

	pairs := []bracketPair{}
	err = ucdparse.Parse(file, func(t *ucdparse.Token) {
		if typ := strings.TrimSpace(t.Field(2)); typ != "o" {
			return
		}

		pair := bracketPair{}
		pair.open, _ = t.Range()
		pair.close = readHexRune(t.Field(1))
		pairs = append(pairs, pair)
	})
	checkFatal(err)

	return pairs
}

func readHexRune(inp string) rune {
	inp = strings.TrimSpace(inp)
	n, _ := strconv.ParseUint(inp, 16, 64)
	return rune(n)
}

func checkFatal(err error) {
	if err != nil {
		log.Fatal(err)
	}
}
